name: Lore N.A. CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    CARGO_TERM_COLOR: always
    PYTHON_VERSION: "3.11"
    RUST_VERSION: "1.75"

jobs:
    # ============================
    # Rust Testing and Building
    # ============================
    rust-test:
        name: ü¶Ä Rust Tests
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: ${{ env.RUST_VERSION }}
                  components: rustfmt, clippy

            - name: Cache Rust dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: rust-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

            - name: Check code formatting
              run: cargo fmt --all -- --check

            - name: Run Clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

            - name: Run tests
              run: cargo test --verbose

            - name: Build release
              run: cargo build --release --verbose

    # ===============================
    # Python Testing and Building
    # ===============================
    python-test:
        name: üêç Python Tests
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.10", "3.11", "3.12"]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Cache Python dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.cache/pip
                  key: python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r python/requirements.txt
                  pip install pytest pytest-cov black flake8 mypy

            - name: Lint with flake8
              run: |
                  flake8 python/ --count --select=E9,F63,F7,F82 --show-source --statistics
                  flake8 python/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

            - name: Check code formatting with black
              run: black --check python/

            - name: Type check with mypy
              run: mypy python/lore_na/ --ignore-missing-imports

            - name: Run tests with pytest
              run: |
                  cd python
                  pytest tests/ --cov=lore_na --cov-report=xml --cov-report=html

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./python/coverage.xml
                  flags: python
                  name: python-${{ matrix.python-version }}

    # ============================
    # Integration Tests
    # ============================
    integration-test:
        name: üîó Integration Tests
        runs-on: ubuntu-latest
        needs: [rust-test, python-test]

        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: lore_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: ${{ env.RUST_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r python/requirements.txt
                  cargo build --release

            - name: Run integration tests
              env:
                  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lore_test
              run: |
                  python scripts/maintenance/validate_project.py
                  make test-integration

    # ============================
    # Security and Quality
    # ============================
    security:
        name: üîí Security Scan
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Run Rust security audit
              uses: actions-rs/audit-check@v1
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install safety
              run: pip install safety

            - name: Run Python security scan
              run: safety check -r python/requirements.txt

    # ============================
    # Docker Build and Push
    # ============================
    docker:
        name: üê≥ Docker Build
        runs-on: ubuntu-latest
        needs: [rust-test, python-test, integration-test]
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              continue-on-error: true
              with:
                  username: ${{ secrets.DOCKER_USERNAME || 'dummy' }}
                  password: ${{ secrets.DOCKER_PASSWORD || 'dummy' }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: lore-na/core
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: ${{ secrets.DOCKER_USERNAME != '' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    # ============================
    # Documentation
    # ============================
    docs:
        name: üìö Documentation
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install documentation dependencies
              run: |
                  pip install sphinx sphinx-rtd-theme myst-parser
                  pip install -r python/requirements.txt

            - name: Build documentation
              run: |
                  cd docs
                  make html

            - name: Deploy to GitHub Pages
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: peaceiris/actions-gh-pages@v3
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  publish_dir: ./docs/_build/html
