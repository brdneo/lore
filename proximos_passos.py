#!/usr/bin/env python3
"""
Pr√≥ximos Passos - Deploy Lore N.A.
=================================

Script interativo para guiar o deploy em produ√ß√£o.
"""

import os
import json
import subprocess
from datetime import datetime

def print_header():
    print("üöÄ LORE N.A. - DEPLOY PARA PRODU√á√ÉO")
    print("=" * 40)
    print()

def check_current_status():
    """Verifica status atual do projeto"""
    print("üìä VERIFICANDO STATUS ATUAL...")
    
    checks = {
        "üèóÔ∏è  Estrutura do projeto": os.path.exists("src/api_server.py"),
        "üìù  Documenta√ß√£o": os.path.exists("docs/reports/STATUS-PRODUCAO.md"),
        "‚öôÔ∏è   Config Railway": os.path.exists("config/railway.json"),
        "üêç  Procfile": os.path.exists("Procfile"),
        "üì¶  Requirements": os.path.exists("requirements.txt"),
        "üîß  Cloud config": os.path.exists("src/cloud_deployment_config.py"),
        "üóÑÔ∏è   Database manager": os.path.exists("src/database_manager.py"),
    }
    
    all_good = True
    for check, status in checks.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"   {status_icon} {check}")
        if not status:
            all_good = False
    
    print()
    if all_good:
        print("üéâ PROJETO 100% PRONTO PARA DEPLOY!")
    else:
        print("‚ö†Ô∏è  Alguns arquivos est√£o faltando")
    
    return all_good

def check_environment():
    """Verifica vari√°veis de ambiente"""
    print("üîç VERIFICANDO ENVIRONMENT...")
    
    env_vars = {
        "DATABASE_URL": os.getenv("DATABASE_URL"),
        "JWT_SECRET": os.getenv("JWT_SECRET"),
        "ENVIRONMENT": os.getenv("ENVIRONMENT", "development"),
        "PORT": os.getenv("PORT", "8000")
    }
    
    for var, value in env_vars.items():
        if value:
            masked_value = value[:20] + "..." if len(value) > 20 else value
            print(f"   ‚úÖ {var}: {masked_value}")
        else:
            print(f"   ‚ùå {var}: N√ÉO CONFIGURADO")
    
    print()

def create_env_template():
    """Cria template .env para produ√ß√£o"""
    print("üìù CRIANDO TEMPLATE .env...")
    
    env_content = f"""# Lore N.A. - Configura√ß√£o de Produ√ß√£o
# Gerado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# =================
# RAILWAY CONFIG
# =================
PORT=8000
ENVIRONMENT=production

# =================
# NEON DATABASE
# =================
DATABASE_URL=postgresql://username:password@hostname/database?sslmode=require

# =================
# SECURITY
# =================
JWT_SECRET=your-super-secure-jwt-secret-here-at-least-64-characters-long
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# =================
# API CONFIG
# =================
API_TITLE=Lore N.A. API
API_VERSION=2.0.0
API_DESCRIPTION=Sistema de Vida Artificial

# =================
# LOGGING
# =================
LOG_LEVEL=INFO
"""
    
    with open(".env.production", "w") as f:
        f.write(env_content)
    
    print("   ‚úÖ Arquivo .env.production criado")
    print("   üìã Copie e configure as vari√°veis conforme necess√°rio")
    print()

def show_deployment_steps():
    """Mostra pr√≥ximos passos para deploy"""
    print("üìã PR√ìXIMOS PASSOS PARA PRODU√á√ÉO:")
    print()
    
    steps = [
        {
            "title": "1. üêò CONFIGURAR NEON POSTGRESQL",
            "actions": [
                "‚Ä¢ Acessar: https://neon.tech/",
                "‚Ä¢ Criar conta gratuita",
                "‚Ä¢ Criar database: 'lore-na-universe'",
                "‚Ä¢ Copiar connection string",
                "‚Ä¢ Adicionar no .env como DATABASE_URL"
            ]
        },
        {
            "title": "2. üöÇ CONFIGURAR RAILWAY",
            "actions": [
                "‚Ä¢ Acessar: https://railway.app/",
                "‚Ä¢ Conectar com GitHub",
                "‚Ä¢ Importar este reposit√≥rio",
                "‚Ä¢ Configurar vari√°veis de ambiente",
                "‚Ä¢ Fazer primeiro deploy"
            ]
        },
        {
            "title": "3. üîê CONFIGURAR SEGURAN√áA",
            "actions": [
                "‚Ä¢ Gerar JWT_SECRET seguro",
                "‚Ä¢ Configurar CORS para dom√≠nio",
                "‚Ä¢ Adicionar rate limiting",
                "‚Ä¢ Configurar SSL/HTTPS"
            ]
        },
        {
            "title": "4. üìä CONFIGURAR MONITORAMENTO",
            "actions": [
                "‚Ä¢ Ativar logs no Railway",
                "‚Ä¢ Configurar health checks",
                "‚Ä¢ Adicionar alertas de erro",
                "‚Ä¢ Monitorar m√©tricas de uso"
            ]
        }
    ]
    
    for step in steps:
        print(f"   {step['title']}")
        for action in step['actions']:
            print(f"     {action}")
        print()

def test_local_api():
    """Testa API local"""
    print("üß™ TESTANDO API LOCAL...")
    
    try:
        # Tentar fazer uma requisi√ß√£o local
        import requests
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ API local funcionando")
            data = response.json()
            print(f"   üìä Status: {data.get('status')}")
            print(f"   üî¢ Vers√£o: {data.get('version')}")
        else:
            print(f"   ‚ùå API retornou status {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("   ‚ö†Ô∏è  API local n√£o est√° rodando")
        print("   üí° Execute: python start.py")
    except ImportError:
        print("   ‚ö†Ô∏è  requests n√£o instalado")
    except Exception as e:
        print(f"   ‚ùå Erro ao testar API: {e}")
    
    print()

def show_costs():
    """Mostra estimativa de custos"""
    print("üí∞ ESTIMATIVA DE CUSTOS:")
    print()
    print("   üÜì TIER GRATUITO (Recomendado):")
    print("      ‚Ä¢ Railway: $500 cr√©ditos gr√°tis (~100 meses)")
    print("      ‚Ä¢ Neon: 0.5GB PostgreSQL gr√°tis")
    print("      ‚Ä¢ Total: $0/m√™s por ~8 meses")
    print()
    print("   üí∞ TIER PAGO (Quando necess√°rio):")
    print("      ‚Ä¢ Railway Pro: $5/m√™s")
    print("      ‚Ä¢ Neon Pro: $19/m√™s")
    print("      ‚Ä¢ Total: ~$25/m√™s")
    print()

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Status atual
    project_ready = check_current_status()
    
    # Environment check
    check_environment()
    
    # Criar template .env
    create_env_template()
    
    # Testar API local
    test_local_api()
    
    # Pr√≥ximos passos
    show_deployment_steps()
    
    # Custos
    show_costs()
    
    # Resumo final
    print("üéØ RESUMO:")
    if project_ready:
        print("   ‚úÖ Projeto PRONTO para deploy")
        print("   ‚è±Ô∏è  Tempo estimado: 30 minutos")
        print("   üöÄ Pr√≥xima a√ß√£o: Criar contas Neon + Railway")
    else:
        print("   ‚ö†Ô∏è  Verificar arquivos faltantes primeiro")
    
    print()
    print("üìö Documenta√ß√£o completa: docs/deployment/DEPLOY-GUIDE.md")
    print("üìä Status detalhado: docs/reports/STATUS-PRODUCAO.md")

if __name__ == "__main__":
    main()
