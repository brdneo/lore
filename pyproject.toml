[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "lore-engine"
version = "0.1.0"
description = "High-performance hybrid Python/Rust engine for Lore N.A. genetic evolution"
authors = [
    {name = "Lore N.A. Genesis Team", email = "genesis@lore-na.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["ai", "genetics", "neural-networks", "simulation", "evolution", "rust"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "networkx>=2.6",
    "scipy>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-benchmark>=4.0",
    "black>=22.0",
    "isort>=5.10",
    "mypy>=0.991",
    "ruff>=0.0.261",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18",
]

[project.urls]
Homepage = "https://github.com/lore-na/core"
Documentation = "https://docs.lore-na.com"
Repository = "https://github.com/lore-na/core"
Issues = "https://github.com/lore-na/core/issues"

[tool.maturin]
python-source = "python"
module-name = "lore_engine"
bindings = "pyo3"
compatibility = "linux"
strip = true

[tool.pyright]
typeCheckingMode = "off"
reportGeneralTypeIssues = "none"
reportMissingImports = "none"
reportMissingTypeStubs = false
reportOptionalMemberAccess = "none"
reportOptionalSubscript = "none"
reportOptionalIterable = "none"
reportAttributeAccessIssue = "none"
reportCallIssue = "none"
reportArgumentType = "none"
reportAssignmentType = "none"
reportOperatorIssue = "none"
reportIndexIssue = "none"
reportPrivateUsage = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportMissingParameterType = "none"
reportMissingReturnType = "none"
reportUntypedFunctionDecorator = "none"
reportIncompatibleMethodOverride = "none"
reportIncompatibleVariableOverride = "none"
reportConstantRedefinition = "none"
reportImportCycles = "none"
reportUnusedImport = "none"
reportUnusedClass = "none"
reportUnusedFunction = "none"
reportUnusedVariable = "none"
reportDuplicateImport = "none"

exclude = [
    "examples/",
    "scripts/",
    "tools/",
    "**/__pycache__",
    "**/.pytest_cache",
    "target/",
    "dist/",
    "build/",
]

[tool.pylsp-mypy]
enabled = false

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 120
target-version = "py38"
select = ["E", "F", "W", "C90", "I", "N", "UP", "S", "B", "A", "C4", "DTZ", "T10", "EM", "ISC", "ICN", "G", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "PERF", "RUF"]
ignore = ["E501", "F401", "F811", "S101", "PLR0913", "PLR0912", "PLR0915", "C901"]

[tool.pytest.ini_options]
testpaths = ["tests", "python/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--verbose --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
]
