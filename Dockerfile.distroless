# Dockerfile alternativo usando distroless para maior seguran√ßa
# Para usar: mv Dockerfile.distroless Dockerfile

# ================================
# Stage 1: Rust Build Environment
# ================================
FROM rust:1.80-bookworm AS rust-builder

WORKDIR /usr/src/app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy Rust workspace configuration
COPY Cargo.toml Cargo.lock ./
COPY crates/ ./crates/

# Build Rust libraries
RUN cargo build --release

# ====================================
# Stage 2: Python Build Environment  
# ====================================
FROM python:3.12-bookworm AS python-builder

WORKDIR /app

# Install Python build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy Python package configuration
COPY python/requirements.txt ./
COPY python/pyproject.toml ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy Python source code
COPY python/ ./python/
COPY scripts/ ./scripts/
COPY config/ ./config/

# ==============================
# Stage 3: Distroless Runtime
# ==============================
FROM gcr.io/distroless/python3-debian12:latest AS runtime

WORKDIR /app

# Copy built artifacts from previous stages
COPY --from=rust-builder /usr/src/app/target/release/ ./target/release/
COPY --from=python-builder /app/ ./

# Copy additional project files
COPY README.md ./
COPY LICENSE ./

# Set non-root user
USER nonroot:nonroot

# Expose port
EXPOSE 8000

# Run application
CMD ["python/lore_na/cli.py"]
