# docker-compose.yml
# Versão 5.5 - Fundação Final: Implementa a stack completa e verificada do Supabase.
# Esta é a base estável para todo o desenvolvimento futuro do Lore N.A.

services:
    studio:
        image: supabase/studio:2025.06.23-sha-17632f7
        restart: unless-stopped
        env_file: ./.env
        ports:
            - "3000:3000"
        depends_on:
            db:
                condition: service_healthy
            rest:
                condition: service_started # Mudado para started para mais flexibilidade
        networks:
            - lore_network

    kong:
        image: kong:3.6.1
        restart: unless-stopped
        env_file: ./.env
        environment:
            KONG_DATABASE: "off"
            KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
            KONG_ADMIN_LISTEN: "0.0.0.0:8001"
            KONG_PROXY_LISTEN: "0.0.0.0:8000"
            KONG_PLUGINS: "bundled"
        volumes:
            - ./infra/kong.yml:/usr/local/kong/declarative/kong.yml:ro
        ports:
            - "8000:8000"
            - "8001:8001"
            - "8443:8443"
        healthcheck:
            test: ["CMD-SHELL", "kong health"]
            interval: 10s
            timeout: 5s
            retries: 3
        networks:
            - lore_network
        security_opt:
            - no-new-privileges:true
        read_only: false
        tmpfs:
            - /tmp
        user: "kong:kong"

    auth:
        image: supabase/gotrue:v2.176.1
        restart: unless-stopped
        env_file: ./.env
        depends_on:
            db:
                condition: service_healthy
        networks:
            - lore_network
        environment:
            API_EXTERNAL_URL: ${KONG_INTERNAL_URL}

    rest:
        image: postgrest/postgrest:v13.0.4
        restart: unless-stopped
        env_file: ./.env
        depends_on:
            db:
                condition: service_healthy
        networks:
            - lore_network
        environment:
            - PGRST_DB_URI=${PGRST_DB_URI}
            - PGRST_DB_SCHEMAS=public,storage
            - PGRST_DB_ANON_ROLE=${PGRST_DB_ANON_ROLE}
        security_opt:
            - no-new-privileges:true
        read_only: true
        tmpfs:
            - /tmp

    realtime:
        image: supabase/realtime:v2.37.4
        restart: unless-stopped
        env_file: ./.env
        depends_on:
            db:
                condition: service_healthy
        networks:
            - lore_network
        environment:
            API_EXTERNAL_URL: ${KONG_INTERNAL_URL}
            RLIMIT_NOFILE: "1048576"

    storage:
        image: supabase/storage-api:v1.24.6
        restart: unless-stopped
        env_file: ./.env
        depends_on:
            db:
                condition: service_healthy
        networks:
            - lore_network
        environment:
            API_EXTERNAL_URL: ${KONG_INTERNAL_URL}
            DATABASE_URL: ${DATABASE_URL}
            FILE_STORAGE_BACKEND_PATH: /var/lib/storage
        volumes:
            - ./supabase/volumes/storage:/var/lib/storage

    meta:
        image: supabase/postgres-meta:v0.89.3
        restart: unless-stopped
        env_file: ./.env
        depends_on:
            db:
                condition: service_healthy
        networks:
            - lore_network

    db:
        image: supabase/postgres:15.1.0.118
        restart: unless-stopped
        volumes:
            - ./supabase/volumes/db/data:/var/lib/postgresql/data
            - ./supabase/volumes/db/init:/docker-entrypoint-initdb.d
        env_file: ./.env
        ports:
            - "127.0.0.1:5432:5432" # Bind apenas ao localhost para maior segurança
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB}"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - lore_network
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Usar variável de ambiente
        security_opt:
            - no-new-privileges:true
        tmpfs:
            - /tmp
            - /var/run/postgresql

    # --- Serviço de Agente (Nossa Integração) ---
    agent_runner:
        build:
            context: ./services/agent_runner
        restart: unless-stopped
        depends_on:
            kong:
                condition: service_healthy
            rest:
                condition: service_started
            db:
                condition: service_healthy
        command: >
            sh -c "
              echo 'Aguardando serviços estarem prontos...' &&
              sleep 10 &&
              echo 'Iniciando agente...' &&
              python main.py
            "
        env_file: ./.env
        networks:
            - lore_network
        security_opt:
            - no-new-privileges:true
        read_only: false
        tmpfs:
            - /tmp
        user: "1000:1000" # Usuário não-root

networks:
    lore_network:
        name: lore_network
